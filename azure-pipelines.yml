trigger:
- main

resources:
- repo: self

variables:
  imageRepo: sampleapp
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Build an image
      inputs:
        containerRegistry: 'ACR'
        repository: '$(imageRepo)'
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/app/Dockerfile'
        tags: |
          $(tag)
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/s/kubernetes'
        artifact: 'manifests'
        publishLocation: 'pipeline'
        
- stage: Deploy
  displayName: Deploy to Dev
  dependsOn: Build
  variables:
    acrsecret: k8sexamplesacrauth
    acrdevurl: 'acraish.azurecr.io'
    replicaNo: 3
  jobs:
  - job: Deploy
    displayName: Deploy to AKS
    #environment: 'k8sdev.default'
    pool: 
      vmImage: ubuntu-latest
      steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'manifests'
          targetPath: '$(Pipeline.Workspace)/manifests'
      - task: KubernetesManifest@0
        inputs:
          action: 'createSecret'
          kubernetesServiceConnection: "AKS-NEW"
          namespace: 'default'
          secretType: 'dockerRegistry'
          secretName: '$(acrsecret)'
          dockerRegistryEndpoint: 'ACR'
      - task: replacetokens@3
        displayName: Replace Tokens
        inputs:
          rootDirectory: '$(Pipeline.Workspace)/manifests/'
          targetFiles: 'deployment.yml'
          encoding: 'auto'
          writeBOM: true
          actionOnMissing: 'warn'
          keepToken: false
          tokenPrefix: '#'
          tokenSuffix: '#'
          useLegacyPattern: false
          enableTransforms: false
          enableTelemetry: true
      - task: KubernetesManifest@0
        inputs:
          action: 'deploy'
          kubernetesServiceConnection: "AKS-NEW"
          namespace: 'default'
          manifests: |
            $(Pipeline.Workspace)/manifests/deployment.yml
            $(Pipeline.Workspace)/manifests/service.yml
          containers: '$(acrdevurl)/$(imageRepo):$(tag)'
          imagePullSecrets: '$(acrsecret)'
